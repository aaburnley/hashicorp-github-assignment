---
title: How to use git commands to view and update tracking branches
description: This document explains how to use git commands to update tracking branches and the differences between those git commands (push, pull, and fetch).
author: aaburnley
date: 2/10/2023
---

# How to use git commands to veiw and update tracking branches

## Git commands uses to  view and update tracking branches

- `git push`: This command sends changes from a local branch to a remote repository (repo).
- `git fetch`: This command gets changes from a remote repo into a tracking branch.
- `git pull`: This command gets changes from a remote branch into a tracking branch then merges them into a local branch

## What is the difference between push, pull, and fetch?

Often `git push` and `git pull` are described as similar commands. This isn't entirely true, because the `git push` command does one thing. `git push` takes your current branch, and checks to see whether or not there is a tracking branch for a remote repository connected to it. If so, your changes are taken from your local branch and pushed to the remote branch. 

This is how code is shared with a remote repository. You can think of this command as "make the remote branch resemble my local branch". However, this will fail if your remote branch has veered away from your local branch, meaning not all of the commits made in the remote branch are in your local branch. This is causes a merge conflict, and you will be unable to push your commits to the remote bracnh. When this happens, you must match your local branch to the remote branch. You can do this two ways:
- Use one command, `git pull` or 
- Use two commands, you can first use `git fetch` followed by `git merge`.

`git fetch` takes your current branch, and checks to see if there is a tracking branch. If so, it looks for changes in the remote branch and then pulls them into the tracking branch. It doesn't change your local branch. To do that, you'll need to do `git merge origin/master` for the "master" branch to merge those changes into your branch.

`git pull` simply does a `git fetch` followed immediately by `git merge`. This is often what we desire to do, but some people prefer to use git fetch followed by git merge to make sure they understand the changes they are merging into their branch before the merge happens.
`git pull` does two things.
