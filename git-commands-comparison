---
title: How to use git commands to view changes and update Git branches
description: This document explains how to use git commands to update Git branches and the differences between those Git commands (push, fetch, merge, and pull).
author: aaburnley
date: 2/10/2023
---

# How to use git commands to view changes and update git branches

As you work with code using git, you'll need to send changes you've made on your local branch to a main repository (repo) or vice versa. A tracking branch connects your local branch to the master repo so that git knows where to push your changes.
There are several git commands you'll use to view or get changes into a tracking branch and then added to the main repo. This article describes those git commands you'll use and the differences between those commands.

## Git commands used to view and update tracking branches

- `git push`: This command sends changes from a local branch to a remote repo.
- `git fetch`: This command gets changes from a remote repo into a tracking branch.
- `get merge`: This command adds (merges) changes from the main branch into a local branch.
- `git pull`: This command gets changes from a remote branch into a tracking branch and then merges them into a local branch.

## What's the difference between push, pull, and fetch?

`git push` and `git pull` are often described as similar commands. But, this isn't entirely true because the `git push` command does one action. `git push` takes your current branch and checks to see whether or not there is a tracking branch for a remote repository connected. If so, your changes are taken from your local branch and pushed to the remote branch. In this way, Git shares the code with a remote repository. Another way you can think of the action this command does: "make the remote branch match my local branch." 

However, the `git push` command will fail if your remote branch has veered away from your local branch, meaning not all of the commits made in the remote branch are in your local branch. When this happens, you'll be unable to push your commits to the remote branch. You must get your local branch to match the remote branch. You can do this in two ways:
- Use one command, `git pull` or 
- Use two commands; you can first use `git fetch` followed by `git merge`.

`git fetch` takes your current branch and checks to see if there is a tracking branch. If so, it looks for changes in the remote branch and pulls them into the tracking branch. However, it doesn't change your local branch. To do that, you'll need to do `git merge origin/main` for the "main" branch to merge those changes into your branch. `git pull` is a combination of two commands, first does the same action as a `git fetch`, followed immediately by `git merge`.

Some people prefer to use `git fetch` followed by `git merge` instead of `git pull` to ensure they understand the changes they're merging into their branch before the merge happens. Earlier, you learned that `git push` does one action. However, `git pull` does two tasks at the same time. That is the main difference between those two commands.
